import Pdca from "@/app/models/Pdca";
import { NextResponse } from "next/server";
import { put, del } from '@vercel/blob';
// import connectDB from "@/path/to/your/connectDB"; // üí° ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ connectDB ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß

// ‡∏õ‡∏¥‡∏î bodyParser ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö FormData ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Body
export const config = {
  api: {
    bodyParser: false,
    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Error 413: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î Body Limit (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
    sizeLimit: '100mb',
  },
};

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: parseFormData ---
// ‡πÅ‡∏õ‡∏•‡∏á FormData ‡∏Ç‡∏≠‡∏á Next.js ‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
async function parseFormData(req) {
  const formData = await req.formData();
  const data = {};

  for (const [key, value] of formData.entries()) {
    if (value instanceof File && value.size > 0) {
      // üöÄ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Vercel Blob
      const buffer = Buffer.from(await value.arrayBuffer());

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      const filename = `${Date.now()}-${value.name.replaceAll(' ', '_')}`;

      // Put file to Vercel Blob storage
      const { url } = await put(filename, buffer, { access: 'public' });

      data.fileUrl = url; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡πÉ‡∏´‡∏°‡πà
      data.originalFileName = value.name;
    } else {
      data[key] = value;
    }
  }

  return data;
}

// -------------------------------------------------------------------
// --- GET (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ---
export async function GET(req, { params }) {
  // await connectDB(); 
  try {
    const { id } = params;
    const foundPdca = await Pdca.findById(id);

    if (!foundPdca) return NextResponse.json({ message: "Pdca not found" }, { status: 404 });
    return NextResponse.json({ foundPdca }, { status: 200 });
  } catch (err) {
    console.error("GET API Error:", err);
    return NextResponse.json({ message: "Error fetching PDCA", error: err.message }, { status: 500 });
  }
}

// -------------------------------------------------------------------
// --- PUT (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå) ---
export async function PUT(req, { params }) {
  // await connectDB(); 
  const { id } = params;

  try {
    const pdcaData = await parseFormData(req);
    const existingPdca = await Pdca.findById(id);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
    if (existingPdca) {
      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (existingPdca.fileUrl && (pdcaData.fileAction === "DELETE" || pdcaData.fileUrl)) {
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Vercel Blob
        await del(existingPdca.fileUrl);
      }

      // 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° fileAction
      if (pdcaData.fileAction === "DELETE") {
        pdcaData.fileUrl = null;
        pdcaData.originalFileName = null;
      } else if (pdcaData.fileAction === "RETAIN" && !pdcaData.fileUrl) {
        // RETAIN ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (fileUrl ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô parseFormData ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)
        // ‡πÉ‡∏ä‡πâ URL ‡πÄ‡∏î‡∏¥‡∏°
        pdcaData.fileUrl = existingPdca.fileUrl;
        pdcaData.originalFileName = existingPdca.originalFileName;
      }
    }

    // ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Mongoose ‡∏≠‡∏≠‡∏Å
    delete pdcaData.fileAction;

    // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Mongoose
    const updatedPdca = await Pdca.findByIdAndUpdate(
      id,
      pdcaData,
      {
        new: true,
        runValidators: true
      }
    );

    if (!updatedPdca) {
      return NextResponse.json({ message: "PDCA not found for update" }, { status: 404 });
    }

    return NextResponse.json({ message: "Pdca Updated", updatedPdca }, { status: 200 });

  } catch (err) {
    console.error("PUT API Error (Final Check):", err);

    // ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö Validation Error ‡∏Ç‡∏≠‡∏á Mongoose
    if (err.name === 'ValidationError') {
      return NextResponse.json(
        { message: "Validation failed. Data does not match the schema.", errors: err.errors },
        { status: 400 } // Bad Request
      );
    }

    return NextResponse.json(
      { message: "Internal Server Error updating Pdca", error: err.message },
      { status: 500 }
    );
  }
}

// -------------------------------------------------------------------
// --- DELETE (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå) ---
export async function DELETE(req, { params }) {
  // await connectDB();
  try {
    const { id } = params;
    const pdcaToDelete = await Pdca.findById(id);

    // üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Vercel Blob ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    if (pdcaToDelete && pdcaToDelete.fileUrl) {
      await del(pdcaToDelete.fileUrl);
    }

    await Pdca.findByIdAndDelete(id);
    return NextResponse.json({ message: "Pdca Deleted" }, { status: 200 });
  } catch (err) {
    console.error("DELETE API Error:", err);
    return NextResponse.json({ message: "Error deleting Pdca", error: err.message }, { status: 500 });
  }
}