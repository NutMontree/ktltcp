// import Pdca from "@/app/models/Pdca";
// import { NextResponse } from "next/server";

// export async function GET(req, { params }) {
//   const { id } = params;

//   const foundPdca = await Pdca.findOne({ _id: id });
//   return NextResponse.json({ foundPdca }, { status: 200 });
// }

// export async function PUT(req, { params }) {
//   try {
//     const { id } = params;

//     const body = await req.json();
//     const pdcaData = body.formData;

//     const updatePdcaData = await Pdca.findByIdAndUpdate(id, {
//       ...pdcaData,
//     });

//     return NextResponse.json({ message: "Pdca Update" }, { status: 200 });
//   } catch (err) {
//     console.log(err);
//     return NextResponse.json({ message: "Error", err }, { status: 500 });
//   }
// }

// export async function DELETE(req, { params }) {
//   try {
//     const { id } = params;

//     await Pdca.findByIdAndDelete(id);
//     return NextResponse.json({ message: "Pdca Delete" }, { status: 200 });
//   } catch (err) {
//     console.log(err);
//     return NextResponse.json({ message: "Error", err }, { status: 500 });
//   }
// }

// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå API Route ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á FormData ‡∏Ç‡∏≠‡∏á Next.js ‡πÄ‡∏õ‡πá‡∏ô object



// src/app/api/Pdcas/[id]/route.js
import Pdca from "@/app/models/Pdca";
import { NextResponse } from "next/server";
// import fs from "fs"; // ‚ùå ‡∏•‡∏ö fs
// import path from "path"; // ‚ùå ‡∏•‡∏ö path
import { put } from '@vercel/blob'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Vercel Blob

export const config = {
  api: {
    bodyParser: false,
  },
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á FormData ‡∏Ç‡∏≠‡∏á Next.js ‡πÄ‡∏õ‡πá‡∏ô object
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á FormData ‡∏Ç‡∏≠‡∏á Next.js ‡πÄ‡∏õ‡πá‡∏ô object
async function parseFormData(req) {
  const formData = await req.formData();
  const data = {};

  for (const [key, value] of formData.entries()) {
    if (value instanceof File) {
      // üöÄ ‡πÉ‡∏ä‡πâ Vercel Blob ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô fs

      // ‡πÅ‡∏õ‡∏•‡∏á File ‡πÄ‡∏õ‡πá‡∏ô Buffer
      const buffer = Buffer.from(await value.arrayBuffer());

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Vercel Blob
      const { url } = await put(value.name, buffer, { access: 'public' });

      data.fileUrl = url; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡∏ó‡∏µ‡πà Vercel Blob ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏≤
      data.originalFileName = value.name;
    } else {
      data[key] = value;
    }
  }

  return data;
}

// GET: ‡∏î‡∏∂‡∏á Pdca ‡∏ï‡∏≤‡∏° id
export async function GET(req, { params }) {
  try {
    const { id } = params; // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á id ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const foundPdca = await Pdca.findById(id);
    if (!foundPdca) return NextResponse.json({ message: "Pdca not found" }, { status: 404 });
    return NextResponse.json({ foundPdca }, { status: 200 });
  } catch (err) {
    console.error("GET API Error:", err);
    return NextResponse.json({ message: "Error", err }, { status: 500 });
  }
}

// PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Pdca
export async function PUT(req, { params }) {
  const { id } = params; // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á id ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

  try {
    const pdcaData = await parseFormData(req);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    if (pdcaData.fileAction === "DELETE") {
      pdcaData.fileUrl = null;
      pdcaData.originalFileName = null;
    } else if (pdcaData.fileAction === "RETAIN") {
      delete pdcaData.filepdf;
    }

    // ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Mongoose ‡∏≠‡∏≠‡∏Å
    delete pdcaData.fileAction;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Mongoose ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Validation
    const updatedPdca = await Pdca.findByIdAndUpdate(
      id,
      pdcaData,
      {
        new: true,
        runValidators: true // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Schema Error
      }
    );

    if (!updatedPdca) {
      return NextResponse.json({ message: "PDCA not found for update" }, { status: 404 });
    }

    return NextResponse.json({ message: "Pdca Updated", updatedPdca }, { status: 200 });

  } catch (err) {
    console.error("PUT API Error:", err);

    // ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö Validation Error
    if (err.name === 'ValidationError') {
      return NextResponse.json(
        { message: "Validation failed. Data does not match the schema.", errors: err.errors },
        { status: 400 } // Bad Request
      );
    }

    return NextResponse.json({ message: "Internal Server Error updating Pdca", error: err.message }, { status: 500 });
  }
}

// DELETE: ‡∏•‡∏ö Pdca
export async function DELETE(req, { params }) {
  try {
    const { id } = params; // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á id ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    await Pdca.findByIdAndDelete(id);
    return NextResponse.json({ message: "Pdca Deleted" }, { status: 200 });
  } catch (err) {
    console.error("DELETE API Error:", err);
    return NextResponse.json({ message: "Error deleting Pdca", err }, { status: 500 });
  }
}