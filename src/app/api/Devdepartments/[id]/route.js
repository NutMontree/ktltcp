
import Devdepartment from "@/app/models/Devdepartment";
import { NextResponse } from "next/server";
import { put, del } from '@vercel/blob'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå PDF
// import connectDB from "@/path/to/your/connectDB"; // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ connectDB ‡πÉ‡∏ô API Route ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

// ‡∏õ‡∏¥‡∏î bodyParser ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö FormData
export const config = {
  api: {
    bodyParser: false,
  },
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á FormData ‡∏Ç‡∏≠‡∏á Next.js ‡πÄ‡∏õ‡πá‡∏ô object
async function parseFormData(req) {
  const formData = await req.formData();
  const data = {};

  for (const [key, value] of formData.entries()) {
    if (value instanceof File && value.size > 0) {
      // üöÄ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Vercel Blob
      const buffer = Buffer.from(await value.arrayBuffer());

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      const filename = `${Date.now()}-${value.name.replaceAll(' ', '_')}`;

      // Put file to Vercel Blob storage
      const { url } = await put(filename, buffer, { access: 'public' });

      data.fileUrl = url; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL
      data.originalFileName = value.name;
    } else {
      data[key] = value;
    }
  }

  return data;
}

// --- GET (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ---
export async function GET(req, { params }) {
  // await connectDB(); // üí° ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Request
  try {
    const { id } = params;
    const foundDevdepartment = await Devdepartment.findById(id);
    if (!foundDevdepartment) return NextResponse.json({ message: "Devdepartment not found" }, { status: 404 });
    return NextResponse.json({ foundDevdepartment }, { status: 200 });
  } catch (err) {
    console.error("GET API Error:", err);
    return NextResponse.json({ message: "Error fetching PDCA", error: err.message }, { status: 500 });
  }
}

// --- PUT (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå) ---
export async function PUT(req, { params }) {
  // await connectDB(); // üí° ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Request
  const { id } = params;

  try {
    const devdepartmentData = await parseFormData(req);
    const existingDevdepartment = await Devdepartment.findById(id);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå (fileAction) ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
    if (existingDevdepartment && existingDevdepartment.fileUrl) {
      // 1. ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'DELETE' ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (devdepartmentData ‡∏°‡∏µ fileUrl ‡πÉ‡∏´‡∏°‡πà)
      if (devdepartmentData.fileAction === "DELETE" || devdepartmentData.fileUrl) {
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Vercel Blob ‡∏Å‡πà‡∏≠‡∏ô
        await del(existingDevdepartment.fileUrl);
      }
    }

    // 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    if (devdepartmentData.fileAction === "DELETE") {
      devdepartmentData.fileUrl = null;
      devdepartmentData.originalFileName = null;
    } else if (devdepartmentData.fileAction === "RETAIN") {
      // ‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å RETAIN ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ URL ‡πÄ‡∏î‡∏¥‡∏°
      devdepartmentData.fileUrl = existingDevdepartment.fileUrl;
      devdepartmentData.originalFileName = existingDevdepartment.originalFileName;
    }

    // ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Mongoose ‡∏≠‡∏≠‡∏Å
    delete devdepartmentData.fileAction;

    // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Mongoose ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Validation
    const updatedDevdepartment = await Devdepartment.findByIdAndUpdate(
      id,
      devdepartmentData,
      {
        new: true,
        runValidators: true // ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Validation
      }
    );

    if (!updatedDevdepartment) {
      return NextResponse.json({ message: "PDCA not found for update" }, { status: 404 });
    }

    return NextResponse.json({ message: "Devdepartment Updated", updatedDevdepartment }, { status: 200 });

  } catch (err) {
    console.error("PUT API Error (Final Check):", err);

    // üö® ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö Validation Error ‡∏Ç‡∏≠‡∏á Mongoose
    if (err.name === 'ValidationError') {
      return NextResponse.json(
        { message: "Validation failed. Data does not match the schema.", errors: err.errors },
        { status: 400 } // Bad Request
      );
    }

    return NextResponse.json(
      { message: "Internal Server Error updating Devdepartment (Check BLOB_READ_WRITE_TOKEN)", error: err.message },
      { status: 500 }
    );
  }
}

// --- DELETE (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå) ---
export async function DELETE(req, { params }) {
  // await connectDB(); // üí° ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Request
  try {
    const { id } = params;
    const devdepartmentToDelete = await Devdepartment.findById(id);

    // üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Vercel Blob ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    if (devdepartmentToDelete && devdepartmentToDelete.fileUrl) {
      await del(devdepartmentToDelete.fileUrl);
    }

    await Devdepartment.findByIdAndDelete(id);
    return NextResponse.json({ message: "Devdepartment Deleted" }, { status: 200 });
  } catch (err) {
    console.error("DELETE API Error:", err);
    return NextResponse.json({ message: "Error deleting Devdepartment", error: err.message }, { status: 500 });
  }
}